{"version":3,"sources":["../src/index.ts","../src/BaseZmooth.ts","../src/ZmoothArray.ts","../src/ZmoothNumber.ts","../src/ZmoothManager.ts"],"sourcesContent":["import { ZmoothManager } from './ZmoothManager';\n\nconst globalManager = new ZmoothManager(true);\n\nexport default {\n    inst: (autoUpdate?: boolean) => new ZmoothManager(autoUpdate),\n    val: globalManager.val.bind(globalManager),\n    prop: globalManager.prop.bind(globalManager),\n    killAll: globalManager.killAll.bind(globalManager),\n};\n","export abstract class BaseZmooth<T> {\n    protected _value: T;\n    to: T;\n    speed: number;\n    private _alive = true;\n\n    constructor(value: T, to: T, speed: number = 1) {\n        this._value = value;\n        this.to = to;\n        this.speed = speed;\n    }\n\n    abstract update(delta: number): void;\n\n    kill() {\n        this._alive = false;\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    get alive() {\n        return this._alive;\n    }\n\n    protected smoothValue(from: number, to: number, delta: number) {\n        return from + (to - from) * this.speed * delta;\n    }\n}\n","import { BaseZmooth } from './BaseZmooth';\n\nexport class ZmoothArray extends BaseZmooth<number[]> {\n    onChange?: (values: number[]) => void;\n\n    constructor(value: number[] = [], speed?: number, onChange?: (values: number[]) => void) {\n        super(value, value, speed);\n\n        this.onChange = onChange;\n    }\n\n    update(delta: number) {\n        let i = this._value.length;\n        while (i-- > 0) {\n            this._value[i] = this.smoothValue(this._value[i], this.to[i], delta);\n        }\n\n        this.onChange?.(this._value);\n    }\n}\n","import { BaseZmooth } from './BaseZmooth';\n\nexport class ZmoothNumber extends BaseZmooth<number> {\n    onChange?: (value: number) => void;\n\n    constructor(value: number = 0, speed: number = 1, onChange?: (value: number) => void) {\n        super(value, value, speed);\n\n        this.onChange = onChange;\n    }\n\n    update(delta: number) {\n        this._value = this.smoothValue(this._value, this.to, delta);\n\n        this.onChange?.(this._value);\n    }\n}\n","import { BaseZmooth } from './BaseZmooth';\nimport { ZmoothArray } from './ZmoothArray';\nimport { ZmoothNumber } from './ZmoothNumber';\n\nexport class ZmoothManager {\n    private zmooths: BaseZmooth<unknown>[] = [];\n    private lastTime = performance.now();\n    private rafID: number = -1;\n\n    constructor(autoUpdate: boolean = true) {\n        if (autoUpdate) {\n            this.rafID = requestAnimationFrame(this.autoUpdate.bind(this));\n        }\n    }\n\n    autoUpdate() {\n        const now = performance.now();\n        const delta = (now - this.lastTime) / 1000;\n        this.lastTime = now;\n\n        this.update(delta);\n\n        this.rafID = requestAnimationFrame(this.autoUpdate.bind(this));\n    }\n\n    /**\n     * Update all zmooth objects\n     * @param delta delta time in seconds\n     */\n    update(delta: number) {\n        let i = this.zmooths.length;\n        while (i-- > 0) {\n            const zmooth = this.zmooths[i];\n\n            if (zmooth.alive) {\n                zmooth.update(delta);\n            } else {\n                this.zmooths.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Smooth a value to its destination value\n     * Each time you assign a value via myZmooth.to, it will smoothly interpolate to the destination value\n     * You can assign a new value via .to any time you want\n     * @example\n     * const myZmooth = zmooth.val(0, 5, function(value) {\n     *     console.log(value);\n     * });\n     * \n     * // will smoothly change from 0 to 10\n     * myZmooth.to = 10;\n     * \n     * setTimeout(function() {\n     *     // will smoothly change from current myZmooth value to 20\n     *     myZmooth.to = 20;\n     * }, 2000);\n     * @param value Start value\n     * @param speed Speed of change. The formula is: value = value + (toValue - currValue) * delta * speed\n     * @param onChange Callback each time the value is updated\n     * @returns \n     */\n    val<T extends number | number[]>(value: T, speed?: number, onChange?: (value: T) => void) {\n        // FIXME\n        // @ts-ignore\n        const zmooth = Array.isArray(value) ? new ZmoothArray(value, speed, onChange) : new ZmoothNumber(value, speed, onChange);\n        this.zmooths.push(zmooth);\n        return zmooth;\n    }\n\n    /**\n     * Identical to val()\n     * The difference is that the new value will be automatically assigned to the property in the object you passed in parameters\n     * @example\n     * const myObj = {\n     *     myValue: 0,\n     * };\n     * \n     * // now property 'myValue' on object myObj is managed automatically\n     * const myZmooth = zmooth.prop(myObj, 'myValue');\n     * \n     * // now myObj.value will automatically be interpolated to 10\n     * myZmooth.to = 10;\n     * @param obj Any javascript object\n     * @param propertyName Property that must be smoothed\n     * @param speed Speed of change\n     * @param onChange Callback each time the value is updated\n     * @returns \n     */\n    prop<T extends Record<any, any>>(obj: T, propertyName: keyof T, speed?: number, onChange?: (value: any) => void): BaseZmooth<any> {\n        return this.val(obj[propertyName], speed, (value: any) => {\n            obj[propertyName] = value;\n            onChange?.(value);\n        });\n    }\n\n    /**\n     * Kill a zmooth object\n     * @param zmooth zmooth object to kill\n     */\n    kill(zmooth: BaseZmooth<unknown>) {\n        zmooth.kill();\n    }\n\n    /**\n     * Kill all zmooth objects\n     */\n    killAll() {\n        let i = this.zmooths.length - 1;\n        while (i-- > 0) {\n            this.zmooths[i].kill();\n        }\n\n        this.zmooths = [];\n    }\n\n    /**\n     * Destroy the zmooth manager\n     */\n    destroy() {\n        this.killAll();\n\n        cancelAnimationFrame(this.rafID);\n    }\n}\n"],"mappings":"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","names":[]}